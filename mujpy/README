README (static)
mujpy v. 2.0 version with new classes:

aux.aux 
	general methods
aux.plot
	general plot methods
mucomponents
	mumodel class implementing Minuit 2.0 fits
	muprompt class implementing t = 0 fits
musr2py 
	PB class based on AA and AR cpp class, reads PSI bin and mdu data files
muisis2py 
	RDR hack based on older version of NeXus, reads ISIS nxs data files
	
musuite(path, console) 
    stores instances of musr2py, muisis2py to access data
    loads grp.calib files (json?) 
	containing a list of dictionaries for groups and their alpha values
    automatocally determines t=0 on first file of the suite
    provides methods for producing unbinned time, asymmetry, asymmetry error
	also in separate detectors for alpha calibration fit
mufit
    loads a suite, a dashboard file (json, because it is editable)
    performs following fits (as of 2.0):
	single run single group
	single run alpha calibration 
	multiple run single group, sequential
	single run multi group sequential
	single run multi group global
     auto detected from suite input (runs and calib) plus dashboard parameters

mufitplot 
    does the plots with aux.plot methods
	static single fit
	animated sequential or global fits
	
muplot 
    preliminary plots, n
    
mugui [not upgraded yet] should retain just the ipywidgets interface
    imports suite, fit, plot

mujpy v. 1.0

            ****************
            * FIT AND PLOT *
            ****************
Methods and definition of data type for the main variables 

###################
# METHOD: asymmetry
###################
self.time is a 2D array containing one 1D array, np.array([[t0, t1, t2 ... ]])
self.asymm is a 2D array containing one 1D array per run, np.array([[a0, a1, ...],[a0, a1, ...], ...]) 
self.asyme >>                 >>                        , np.array([[e0, e1, ...],[e0, e1, ...], ...]) 

#########################
# METHOD: on_plot_request
#########################

calls fitplot guess==True
i.e. pars are obtained from fitarg through int2min 
fitarg is a list of dictionaries 
because suite and global fits may have 
different guess value for each run 

#######
# FIT
#######
def fit(self, model_in = 'daml'):
    '''
    fit tab of mugui, used 

    - to set: self.alpha.value, self.offset.value, forw and backw groups fit and plot ranges, model version           
    - to display: model name 
    - to activate: fit, plot and update buttons
    - to select and load model (load from folder is missing/deprecated in python)
    - to select parameters value, fix, function, fft subtract

    ::

    # the calculation is performed in independent class mucomponents
    # the methods are "inherited" by mugui 
    # via the reference instance self._the_model_, initialized in steps: 
    #     __init__ share initial attributes (constants) 
    #     _available_components_ automagical list of mucomponents 
    #     clear_asymmetry: includes reset check when suite is implemented
    #     create_model: lay out self._the_model_
    #     delete_model: for a clean start
    #     functions use eval, evil but needed, checked by muvalid, 
    #     iminuit requires them to be formatted as fitarg by int2min
    #     help  
    #     load 
    #     save_fit/load_ft save results in mujpy format (dill)
    #     write_csv produces a qtiplot/origin loadable summary
    # 
    # Three fit types: single, suite no global, suite global.
    # Suite non global iterates a single fit over several runs
    # Suite global performs a single fit over many runs,
    # with common (global) and run dependent (local) parameters

    '''
    def _available_components_():
        from iminuit import describe
        '''
        Method, returns a template tuple of dictionaries (one per fit component):

        Each dictionary contains 'name' and 'pars', 
        the latter in turns is a list of dictionaries, one per parameter, 'name','error,'limits'

        ::  ({'name':'bl','pars':[{'name':'asymmetry','error':0.01,'limits'[0,0]},

                                  {'name':'Lor_rate','error':0.01,'limits'[0,0]}}, 
                                  ...)

        retreived magically from the mucomponents class.

        '''       
    def addcomponent(name,label):
        '''
        myfit = MuFit()
        addcomponent('ml') # adds e.g. a mu precessing, lorentzian decay, component
        this method adds a component selected from self.available_component, tuple of directories
        with zeroed values, stepbounds from available_components, flags set to '~' and empty functions

        '''
     def checkvalidmodel(name):
        '''
        checkvalidmodel(name) checks that name is a 
        ::      2*component string of valid component names, e.g.
                              'daml' or 'mgmgbl'    
        '''
    def chi(t,y,ey,pars):
        '''
        stats for the right side of the plot 

        '''
    def fitplot(guess=False,plot=False):
        '''
        Plots fit results in external Fit window
        guess=True plot dash guess values
        guess=False plot best fit results
        plot=False best fit, invoke write_csv
        plot=True do not
        
        This is a complex routine that allows for
        ::  - single, multiple or global fits
            - fit range different form plot range
            - either
                one plot range, the figure is a subplots((2,2))
                    plot ax_fit[(0,0), chi2_prints ax_fit[(0,-1)]
                    residues ax_fit[(1,0)], chi2_histograms ax_fit[(1,-1)]
                two plot ranges, early and late, the figure is a subplots((3,2))
                    plot_early ax_fit[(0,0)], plot_late ax_fit[(0,1)], chi2_prints ax_fit[(0,-1)]
                    residues_early ax_fit[(1,0)], residues_late ax_fit[(1,1)], chi2_histograms ax_fit[(1,-1)]

        If multi/globalfit, it also allows for either
        ::  - anim display 
            - offset display 

        '''  
        def animate(i):
            '''
            anim function
            update errorbar data, fit, residues and their color,
                   chisquares, their histograms 

            '''
         def init():
            '''
            anim init function
            blitting (see wikipedia)
            to give a clean slate 

            '''
    def int2_int():
        '''
        From internal parameters to the minimal representation 
        for the use of mucomponents._add_.
        Invoked just before submitting minuit 

        '''
    def int2min(return_names=False):
        '''
        From internal parameters to minuit parameters.
        Invoked just before submitting minuit 
        Internal are numbered progressively according to the display:
           first global parameters not belonging to components - e.g. A0, R, 
                    such as for asymmetry1 = A0*R and asymmetry2= A0*(1.-R)
           then local parameters not belonging to components - e.g. B and T
                    from the data file headers
           then the list of components' parameters
        Minuit parameters are the same, including fixed ones, but 
           the ones defined by functions or sharing
        Each parameter requires name=value, error_name=value, fix_name=value, limits_name=value,value
        [plus
           the local replica of the non global component parameters
           to be implemented]

        New version for suite of runs
            fitarg becomes a list of dictionaries

        '''
    def load_fit(b):
        '''
        loads fit values such that the same fit can be reproduced on the same data

        '''
    def min2int(fitargs):
        '''
        From minuit parameters to internal parameters,
        see int2min for a description   
        Invoked just after minuit convergence for save_fit, [on_update]
        '''
    def min2print(fitargs):
        '''
        From minuit parameters to plain print in xterminal ,
        see int2min for a description   
        Invoked just after minuit convergence for output 
        '''
    def on_alpha_changed(change):
        '''
        observe response of fit tab widgets:
        validate float        
        '''
    def on_fit_request(b):
        '''
        retrieve data from the gui dashboard:
        parameters values (parvalue[nint].value), flags (flag[nint].value), 
        errors, limits, functions (function[nint].value), self.alpha.value, range and pack
        pass _int, generated by int2_int. to mumodel._add_ (distribute minuit parameters)
        obtain fitargs dictionary, needed by migrad, either from self.fitargs or from min2int
        pass them to minuit
        call fit_plot
        save fit file in save_fit
        write summary in write_csv 

        '''
    def on_flag_changed(change):
        '''
        observe response of fit tab widgets:
        set disabled on corresponding function (True if flag=='!' or '~', False if flag=='=') 
        '''
    def on_function_changed(change):
        '''
        observe response of fit tab widgets:
        check for validity of function syntax

        '''
    def on_group_changed(change):
        '''
        observe response of setup tab widgets:

        '''
    def on_integer(change):
    def on_load_model(change):       def save_fit(k):
        '''
        saves fit values such that load_fit can reproduce the same fit
        includes fit of suite of runs and global fits
        '''

        '''
        observe response of fit tab widgets:
        check that change['new'] is a valid model
        relaunch MuJPy.fit(change['new'])
        '''
    def on_parvalue_changed(change):
        '''
        observe response of fit tab widgets:
        check for validity of function syntax
        '''
    def on_plot_request(b):
        '''
        plot wrapper
        '''
    def on_range(change):
        '''
        observe response of FIT, PLOT range widgets:
        check for validity of function syntax
        '''
    def on_start_stop(change):
    def on_update(b):
        '''
        update parvalue[k].value with last best fit results
        '''
    def set_group():
        """
        return shorthand csv out of grouping
        name = 'forward' or 'backward'
        grouping[name] is an np.array wth counter indices
        group.value[k] for k=0,1 is a shorthand csv like '1:3,5' or '1,3,5' etc.
        """
    def write_csv(chi2,lowchi2,hichi2,k):
        '''
        writes a csv-like file of best fit parameters 
        that can be imported by qtiplot
        or read by python to produce figures::

            refactored for adding runs 
            and for writing one line per run
            in run suite, both local and global
            do not use csv, in order to control format (precision)

        '''
########################
# METHOD: on_fit_request
#
# executes minuit
#############        def on_plot_request(b):
            '''
            plot wrapper
            '''
###########

time, asymm, asyme = rebin(self.time, self.asymm, [start,stop], pack, e=self.asyme)
lastfit is the iminuit instance and lastfit.migrad() optimizes it
self fitarg is a list 
self.fitargs.append(lastfit.fitarg) appends to the list one best-fit fitarg dictionary per run


#####################################
# METHOD : int2min(return_names=True)
#####################################

return fitarg

fitarg is a list of dictionaries of input guess values from the gui dashboard 
(see int2min)

if return_names==True self.minuit_parameter_names is a list of parameter names
corresponding to flag values '~,l,!' (and not '=') 
in the order set by self.model_components[k]['pars']

###############################
# METHOD: aux.rebin
# rebin(x,y,strstp,pack,e=None)
# repacks the histograms 
###############################

x, y [,e] are self.time, self.asymm, self.asyme
strstp = [start bin, stop bin]
pack = positive integer (incl. 1), how many bins added together 
return xb, yb, [eb]

xb is a is a 2D array containing one 1D array, np.array([[xb0, xb1, xb2 ... ]])
yb is a 2D array containing one 1D array per run, np.array([[yb0, yb1, ...],[yb0, yb1, ...], ...]) 
eb >>                 >>                        , np.array([[eb0, eb1, ...],[eb0, eb1, ...], ...]) 

##################################
# METHOD: mucomponents._add_(x,*p)
##################################

returns model function value f, a 1D array of function values, initialized to zeros
x is a 1D array np.array([x0, x1, ...])
p are the minuit parameters in an intermediate internal order
self._components_[j][0]  component method  and a 
self._components_[j][1]  pars, list of command strings, one for each parameter 
p_comp are the parameter for each model component 
values to p_comp assigned by pars: p_comp.append(eval(pars[l]))

for self._global_==False fits e.g.
f += self._components_[j][0](x,*p_comp) 

if dalpha is present dada = dalpha/self._alpha_ and f = ((2.+dada)*f-dada)/((2.+dada)-dada*f) 


####################################
# METHOD: mucomponents._load_data_()
####################################

loads self._x_, self._y_, self._e_ to be used by self._chisquare_ 
self._x_ is a 1D array  np.array([0, 1, ...])
self._y_ and self._e_ are 1D arrays for _global_==False and 2D arrays for _global_==True

sets attributes such as
self._global_ True/False is fit global?
self._nglobals_ number of globals (not component parameters) 
self._locals_ number of locals (not component parameters) e.g. B, T 
self._alpha_ alpha asymmetry parameter
self._components_ contains component method and par command strings for all its parameters
self._da_index_ dalpha dashboard component index 
self._ntruecomponents_ number of components in the model, besides dalpha

##################################
# METHOD: fitplot
#  one or two rebin ranges
#  anim (runs as frames) 
#  or tile (runs overlayed)
#  both global and local fits
#  (single run si treated as tile)
##################################

pars = [[self.fitargs[k][name] for name in self.minuit_parameter_names] for k in range(len(self.fitargs))]
pars is a list of lists of best-fit parameter values, 
with the order selected by self.minuit_parameter_names (see int2min)

tlate,ylate,eylate = rebin, tfl = rebin, t,y,ey = rebin, tf = rebin
f\fres = np.array([self._the_model_._add_(tf[0]\t[0],*pars[k]) for k in range(len(pars))])
# if two rebin ranges
    fl\flres = np.array([self._the_model_._add_(tfl[0]\tlate[0],*pars[k]) for k in range(len(pars))]) 
tlate, tfl, t, tf are 2D arrays containing one 1D array, np.array([[t0, t1, t2 ... ]])
y,ey, ylate,eylate are 2D array containing one 1D array per run, np.array([[a0, a1, ...],[a0, a1, ...], ...]) 
f, fres, fl, flres are 2D arrays containing one 1D array per run

##### anim
nufit,ffit,chi2fit = chi(tfit[0],yfit[0],eyfit[0],pars[0]) 
tfit[0], yfit[0], eyfit[0] and ffit are 1D arrays, pars[0] is a list of par values (see here above)
plots first run (1D arrays) frame e.g. self.ax_fit[(0,0)].errorbar(t[0],y[0],yerr=ey[0],...)
and invokes animate to plot other 1D slices 
##### tile (includes single run)
t_tile, y_tile, fres_tile  = plotile(t,y,fres,yoffset=yoffset,xoffset=xoffset)  
tf_tile, dum, f_tile  = plotile(t,fres,fres,yoffset=foffset,xoffset=xoffset)  
tlate_tile, ylate_tile, flres_tile  = plotile(tlate,ylate,flres,yoffset=yoffset,xoffset=xoffset) 
tfl_tile, dum, fl_tile  = plotile(tfl,fl,fl,yoffset=foffset,xoffset=xoffset)
plotile transforms all into transposed 2D arrays, assonometrically offset by 
as plotted in one go by self.ax_fit[(0,1)].errorbar(tlate_tile,ylate_tile,yerr=eylate, ...)
plot(x,y), errorbar(x,y,yerr=e) plot 2D array columns with cycling colors, i.e. require trasposing them

##############################
# METHOD: self.fit  animate(i) 
##############################
nufit\nu,ffit\f,chi2fit\chi2plot = chi(tfit[0]\t[0],yfit[i]\y[0],eyfit[i]\ey[0],pars[i])
if two rebin ranges nulate,flres,chi2late = chi(tlate[0],ylate[i],eylat[i],pars[i])
line.set_ydata(f[i]) etc. ydata substitution for all lines and marks in the frames
idem for text and histograms
return fline, ye[i], line, res, title, text, [patchfit, ], [patchplot, ] 
if two rebin ranges return fline, ye[i], line, res, flinel, yel[i], linel, resl, title, text, [patchfit, ], [patchplot, ] 

###################################################
# METHOD: aux.plotile(x,y,yf,yoffset=0.1,xoffset=0)
###################################################
x,y,yf are 2D arrays, x.shape=(1,nbin), y.shape,yf.shape = (nrun, nbin) 
returns xt, yt, yft as 2D offset arrays, e.g.
if xoffset != 0:
    xt = tile(xoffset*arange(y.shape[0]),(1,x.shape[1])).transpose()+tile(xt,(y.shape[0],1))
yt += tile(ymax*arange(y.shape[0]),(y.shape[1],1)).transpose()

            ********************
            * Read data suites *
            ********************

################################
# METHOD: create_rundict
#  dictionary for comparing runs 
################################

for the first run in a suite, first run in an add suite stores a dictionary containing
'nhist' : numer of histograms, 'histolen': length of histograms, 'binwidth': binwidth,  'instrument': (from data file name) 
'nrun': run number, 'date': start date
